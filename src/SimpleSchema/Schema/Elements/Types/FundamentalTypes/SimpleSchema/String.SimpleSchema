# ----------------------------------------------------------------------
# |
# |  String.SimpleSchema
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2022-12-15 13:35:52
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2022-23
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------

String: Type ->
    min_length: Integer { min: 0 } ? { default: 1 }
    max_length: Integer { min: 1 } ?
    validation_expression: String?

    Python ->
        header(
            """
            import re
            """,
        )

        post_init(
            """
            if self.min_length < 0:
                raise SimpleSchemaException("'min_length' must be greater than or equal to '0' ('{}' was provided).".format(self.min_length), self.range)

            if self.max_length is not None:
                if self.max_length < 1:
                    raise SimpleSchemaException("'max_length' must be greater than or equal to '1' ('{}' was provided).".format(self.max_length), self.range)

                if self.min_length > self.max_length:
                    raise SimpleSchemaException("'max_length' < 'min_length'.", self.range)

            if self.validation_expression is not None:
                if self.max_length is not None:
                    raise SimpleSchemaException("'validation_expression' cannot be used with 'max_length'.", self.range)

                try:
                    re.compile(self.validation_expression)
                except re.error as ex:
                    raise SimpleSchemaException("'{}' is not a valid regular expression: {}.".format(self.validation_expression, ex), self.range) from ex
            """,
        )
