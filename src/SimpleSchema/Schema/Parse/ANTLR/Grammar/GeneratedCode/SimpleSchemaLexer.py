# Generated from C:\Code\v4\Common\SimpleSchema\src\SimpleSchema\Schema\Parse\ANTLR\Grammar\SimpleSchema.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



from antlr_denter.DenterHelper import DenterHelper
from SimpleSchemaParser import SimpleSchemaParser



def serializedATN():
    return [
        4,0,62,453,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,
        1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
        1,37,1,38,3,38,256,8,38,1,38,1,38,1,38,5,38,261,8,38,10,38,12,38,
        264,9,38,1,39,3,39,267,8,39,1,39,1,39,1,39,5,39,272,8,39,10,39,12,
        39,275,9,39,1,39,1,39,1,40,1,40,3,40,281,8,40,1,40,1,40,5,40,285,
        8,40,10,40,12,40,288,9,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,
        1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,4,47,321,8,47,
        11,47,12,47,322,1,47,1,47,1,48,1,48,1,48,1,48,5,48,331,8,48,10,48,
        12,48,334,9,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,5,49,343,8,49,
        10,49,12,49,346,9,49,1,49,1,49,1,50,4,50,351,8,50,11,50,12,50,352,
        1,50,1,50,1,51,3,51,358,8,51,1,51,5,51,361,8,51,10,51,12,51,364,
        9,51,1,51,1,51,4,51,368,8,51,11,51,12,51,369,1,52,3,52,373,8,52,
        1,52,4,52,376,8,52,11,52,12,52,377,1,53,3,53,381,8,53,1,53,5,53,
        384,8,53,10,53,12,53,387,9,53,1,53,1,53,5,53,391,8,53,10,53,12,53,
        394,9,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,5,55,405,8,
        55,10,55,12,55,408,9,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,
        1,57,5,57,419,8,57,10,57,12,57,422,9,57,1,58,1,58,1,58,1,58,1,58,
        1,59,1,59,1,59,1,59,1,59,5,59,434,8,59,10,59,12,59,437,9,59,1,60,
        1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,5,61,449,8,61,10,61,
        12,61,452,9,61,5,332,406,420,435,450,0,62,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,
        60,121,61,123,62,1,0,9,2,0,9,9,32,32,4,0,45,57,65,90,95,95,97,122,
        2,0,10,10,13,13,1,0,48,57,4,0,36,36,38,38,64,64,95,95,2,0,65,90,
        97,122,5,0,45,45,48,57,65,90,95,95,97,122,1,0,34,34,1,0,39,39,478,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
        0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,125,1,0,0,0,3,127,1,0,0,0,5,
        129,1,0,0,0,7,134,1,0,0,0,9,136,1,0,0,0,11,138,1,0,0,0,13,140,1,
        0,0,0,15,142,1,0,0,0,17,144,1,0,0,0,19,146,1,0,0,0,21,148,1,0,0,
        0,23,152,1,0,0,0,25,156,1,0,0,0,27,160,1,0,0,0,29,165,1,0,0,0,31,
        170,1,0,0,0,33,175,1,0,0,0,35,178,1,0,0,0,37,181,1,0,0,0,39,184,
        1,0,0,0,41,186,1,0,0,0,43,188,1,0,0,0,45,191,1,0,0,0,47,194,1,0,
        0,0,49,197,1,0,0,0,51,203,1,0,0,0,53,209,1,0,0,0,55,215,1,0,0,0,
        57,219,1,0,0,0,59,223,1,0,0,0,61,227,1,0,0,0,63,232,1,0,0,0,65,235,
        1,0,0,0,67,237,1,0,0,0,69,240,1,0,0,0,71,242,1,0,0,0,73,245,1,0,
        0,0,75,252,1,0,0,0,77,255,1,0,0,0,79,266,1,0,0,0,81,278,1,0,0,0,
        83,291,1,0,0,0,85,294,1,0,0,0,87,297,1,0,0,0,89,300,1,0,0,0,91,303,
        1,0,0,0,93,310,1,0,0,0,95,320,1,0,0,0,97,326,1,0,0,0,99,340,1,0,
        0,0,101,350,1,0,0,0,103,357,1,0,0,0,105,372,1,0,0,0,107,380,1,0,
        0,0,109,395,1,0,0,0,111,398,1,0,0,0,113,409,1,0,0,0,115,412,1,0,
        0,0,117,423,1,0,0,0,119,428,1,0,0,0,121,438,1,0,0,0,123,443,1,0,
        0,0,125,126,5,123,0,0,126,2,1,0,0,0,127,128,5,125,0,0,128,4,1,0,
        0,0,129,130,5,112,0,0,130,131,5,97,0,0,131,132,5,115,0,0,132,133,
        5,115,0,0,133,6,1,0,0,0,134,135,5,44,0,0,135,8,1,0,0,0,136,137,5,
        58,0,0,137,10,1,0,0,0,138,139,5,63,0,0,139,12,1,0,0,0,140,141,5,
        42,0,0,141,14,1,0,0,0,142,143,5,43,0,0,143,16,1,0,0,0,144,145,5,
        121,0,0,145,18,1,0,0,0,146,147,5,89,0,0,147,20,1,0,0,0,148,149,5,
        121,0,0,149,150,5,101,0,0,150,151,5,115,0,0,151,22,1,0,0,0,152,153,
        5,89,0,0,153,154,5,101,0,0,154,155,5,115,0,0,155,24,1,0,0,0,156,
        157,5,89,0,0,157,158,5,69,0,0,158,159,5,83,0,0,159,26,1,0,0,0,160,
        161,5,116,0,0,161,162,5,114,0,0,162,163,5,117,0,0,163,164,5,101,
        0,0,164,28,1,0,0,0,165,166,5,84,0,0,166,167,5,114,0,0,167,168,5,
        117,0,0,168,169,5,101,0,0,169,30,1,0,0,0,170,171,5,84,0,0,171,172,
        5,82,0,0,172,173,5,85,0,0,173,174,5,69,0,0,174,32,1,0,0,0,175,176,
        5,111,0,0,176,177,5,110,0,0,177,34,1,0,0,0,178,179,5,79,0,0,179,
        180,5,110,0,0,180,36,1,0,0,0,181,182,5,79,0,0,182,183,5,78,0,0,183,
        38,1,0,0,0,184,185,5,110,0,0,185,40,1,0,0,0,186,187,5,78,0,0,187,
        42,1,0,0,0,188,189,5,110,0,0,189,190,5,111,0,0,190,44,1,0,0,0,191,
        192,5,78,0,0,192,193,5,111,0,0,193,46,1,0,0,0,194,195,5,78,0,0,195,
        196,5,79,0,0,196,48,1,0,0,0,197,198,5,102,0,0,198,199,5,97,0,0,199,
        200,5,108,0,0,200,201,5,115,0,0,201,202,5,101,0,0,202,50,1,0,0,0,
        203,204,5,70,0,0,204,205,5,97,0,0,205,206,5,108,0,0,206,207,5,115,
        0,0,207,208,5,101,0,0,208,52,1,0,0,0,209,210,5,70,0,0,210,211,5,
        65,0,0,211,212,5,76,0,0,212,213,5,83,0,0,213,214,5,69,0,0,214,54,
        1,0,0,0,215,216,5,111,0,0,216,217,5,102,0,0,217,218,5,102,0,0,218,
        56,1,0,0,0,219,220,5,79,0,0,220,221,5,102,0,0,221,222,5,102,0,0,
        222,58,1,0,0,0,223,224,5,79,0,0,224,225,5,70,0,0,225,226,5,70,0,
        0,226,60,1,0,0,0,227,228,5,78,0,0,228,229,5,111,0,0,229,230,5,110,
        0,0,230,231,5,101,0,0,231,62,1,0,0,0,232,233,5,97,0,0,233,234,5,
        115,0,0,234,64,1,0,0,0,235,236,5,61,0,0,236,66,1,0,0,0,237,238,5,
        45,0,0,238,239,5,62,0,0,239,68,1,0,0,0,240,241,5,46,0,0,241,70,1,
        0,0,0,242,243,5,58,0,0,243,244,5,58,0,0,244,72,1,0,0,0,245,246,5,
        58,0,0,246,247,5,58,0,0,247,248,5,105,0,0,248,249,5,116,0,0,249,
        250,5,101,0,0,250,251,5,109,0,0,251,74,1,0,0,0,252,253,5,124,0,0,
        253,76,1,0,0,0,254,256,5,13,0,0,255,254,1,0,0,0,255,256,1,0,0,0,
        256,257,1,0,0,0,257,258,5,10,0,0,258,262,4,38,0,0,259,261,7,0,0,
        0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,
        0,263,78,1,0,0,0,264,262,1,0,0,0,265,267,5,13,0,0,266,265,1,0,0,
        0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,5,10,0,0,269,273,4,39,
        1,0,270,272,7,0,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,
        0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,6,39,
        0,0,277,80,1,0,0,0,278,280,5,92,0,0,279,281,5,13,0,0,280,279,1,0,
        0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,286,5,10,0,0,283,285,7,0,
        0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,
        0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,6,40,0,0,290,82,1,0,
        0,0,291,292,5,40,0,0,292,293,6,41,1,0,293,84,1,0,0,0,294,295,5,41,
        0,0,295,296,6,42,2,0,296,86,1,0,0,0,297,298,5,91,0,0,298,299,6,43,
        3,0,299,88,1,0,0,0,300,301,5,93,0,0,301,302,6,44,4,0,302,90,1,0,
        0,0,303,304,5,102,0,0,304,305,5,114,0,0,305,306,5,111,0,0,306,307,
        5,109,0,0,307,308,1,0,0,0,308,309,6,45,5,0,309,92,1,0,0,0,310,311,
        5,105,0,0,311,312,5,109,0,0,312,313,5,112,0,0,313,314,5,111,0,0,
        314,315,5,114,0,0,315,316,5,116,0,0,316,317,1,0,0,0,317,318,6,46,
        6,0,318,94,1,0,0,0,319,321,7,1,0,0,320,319,1,0,0,0,321,322,1,0,0,
        0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,325,4,47,2,
        0,325,96,1,0,0,0,326,327,5,35,0,0,327,328,5,47,0,0,328,332,1,0,0,
        0,329,331,9,0,0,0,330,329,1,0,0,0,331,334,1,0,0,0,332,333,1,0,0,
        0,332,330,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,336,5,47,0,
        0,336,337,5,35,0,0,337,338,1,0,0,0,338,339,6,48,7,0,339,98,1,0,0,
        0,340,344,5,35,0,0,341,343,8,2,0,0,342,341,1,0,0,0,343,346,1,0,0,
        0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,
        0,347,348,6,49,7,0,348,100,1,0,0,0,349,351,7,0,0,0,350,349,1,0,0,
        0,351,352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,
        0,354,355,6,50,0,0,355,102,1,0,0,0,356,358,5,45,0,0,357,356,1,0,
        0,0,357,358,1,0,0,0,358,362,1,0,0,0,359,361,7,3,0,0,360,359,1,0,
        0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,365,1,0,
        0,0,364,362,1,0,0,0,365,367,5,46,0,0,366,368,7,3,0,0,367,366,1,0,
        0,0,368,369,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,104,1,0,
        0,0,371,373,5,45,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,375,1,0,
        0,0,374,376,7,3,0,0,375,374,1,0,0,0,376,377,1,0,0,0,377,375,1,0,
        0,0,377,378,1,0,0,0,378,106,1,0,0,0,379,381,7,4,0,0,380,379,1,0,
        0,0,380,381,1,0,0,0,381,385,1,0,0,0,382,384,5,95,0,0,383,382,1,0,
        0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,
        0,0,387,385,1,0,0,0,388,392,7,5,0,0,389,391,7,6,0,0,390,389,1,0,
        0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,108,1,0,
        0,0,394,392,1,0,0,0,395,396,3,111,55,0,396,397,5,34,0,0,397,110,
        1,0,0,0,398,406,5,34,0,0,399,400,5,92,0,0,400,405,5,34,0,0,401,402,
        5,92,0,0,402,405,5,92,0,0,403,405,8,7,0,0,404,399,1,0,0,0,404,401,
        1,0,0,0,404,403,1,0,0,0,405,408,1,0,0,0,406,407,1,0,0,0,406,404,
        1,0,0,0,407,112,1,0,0,0,408,406,1,0,0,0,409,410,3,115,57,0,410,411,
        5,39,0,0,411,114,1,0,0,0,412,420,5,39,0,0,413,414,5,92,0,0,414,419,
        5,39,0,0,415,416,5,92,0,0,416,419,5,92,0,0,417,419,8,8,0,0,418,413,
        1,0,0,0,418,415,1,0,0,0,418,417,1,0,0,0,419,422,1,0,0,0,420,421,
        1,0,0,0,420,418,1,0,0,0,421,116,1,0,0,0,422,420,1,0,0,0,423,424,
        3,119,59,0,424,425,5,34,0,0,425,426,5,34,0,0,426,427,5,34,0,0,427,
        118,1,0,0,0,428,429,5,34,0,0,429,430,5,34,0,0,430,431,5,34,0,0,431,
        435,1,0,0,0,432,434,9,0,0,0,433,432,1,0,0,0,434,437,1,0,0,0,435,
        436,1,0,0,0,435,433,1,0,0,0,436,120,1,0,0,0,437,435,1,0,0,0,438,
        439,3,123,61,0,439,440,5,39,0,0,440,441,5,39,0,0,441,442,5,39,0,
        0,442,122,1,0,0,0,443,444,5,39,0,0,444,445,5,39,0,0,445,446,5,39,
        0,0,446,450,1,0,0,0,447,449,9,0,0,0,448,447,1,0,0,0,449,452,1,0,
        0,0,450,451,1,0,0,0,450,448,1,0,0,0,451,124,1,0,0,0,452,450,1,0,
        0,0,25,0,255,262,266,273,280,286,322,332,344,352,357,362,369,372,
        377,380,385,392,404,406,418,420,435,450,8,0,1,0,1,41,0,1,42,1,1,
        43,2,1,44,3,1,45,4,1,46,5,6,0,0
    ]

class SimpleSchemaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    NEWLINE = 39
    NESTED_NEWLINE = 40
    LINE_CONTINUATION = 41
    LPAREN = 42
    RPAREN = 43
    LBRACK = 44
    RBRACK = 45
    INCLUDE_FROM = 46
    INCLUDE_IMPORT = 47
    INCLUDE_FILENAME = 48
    MULTI_LINE_COMMENT = 49
    SINGLE_LINE_COMMENT = 50
    HORIZONTAL_WHITESPACE = 51
    NUMBER = 52
    INTEGER = 53
    IDENTIFIER = 54
    DOUBLE_QUOTE_STRING = 55
    UNTERMINATED_DOUBLE_QUOTE_STRING = 56
    SINGLE_QUOTE_STRING = 57
    UNTERMINATED_SINGLE_QUOTE_STRING = 58
    TRIPLE_DOUBLE_QUOTE_STRING = 59
    UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING = 60
    TRIPLE_SINGLE_QUOTE_STRING = 61
    UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'pass'", "','", "':'", "'?'", "'*'", "'+'", "'y'", 
            "'Y'", "'yes'", "'Yes'", "'YES'", "'true'", "'True'", "'TRUE'", 
            "'on'", "'On'", "'ON'", "'n'", "'N'", "'no'", "'No'", "'NO'", 
            "'false'", "'False'", "'FALSE'", "'off'", "'Off'", "'OFF'", 
            "'None'", "'as'", "'='", "'->'", "'.'", "'::'", "'::item'", 
            "'|'", "'('", "')'", "'['", "']'", "'from'", "'import'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "NESTED_NEWLINE", "LINE_CONTINUATION", "LPAREN", 
            "RPAREN", "LBRACK", "RBRACK", "INCLUDE_FROM", "INCLUDE_IMPORT", 
            "INCLUDE_FILENAME", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
            "HORIZONTAL_WHITESPACE", "NUMBER", "INTEGER", "IDENTIFIER", 
            "DOUBLE_QUOTE_STRING", "UNTERMINATED_DOUBLE_QUOTE_STRING", "SINGLE_QUOTE_STRING", 
            "UNTERMINATED_SINGLE_QUOTE_STRING", "TRIPLE_DOUBLE_QUOTE_STRING", 
            "UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING", "TRIPLE_SINGLE_QUOTE_STRING", 
            "UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "NEWLINE", "NESTED_NEWLINE", "LINE_CONTINUATION", "LPAREN", 
                  "RPAREN", "LBRACK", "RBRACK", "INCLUDE_FROM", "INCLUDE_IMPORT", 
                  "INCLUDE_FILENAME", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                  "HORIZONTAL_WHITESPACE", "NUMBER", "INTEGER", "IDENTIFIER", 
                  "DOUBLE_QUOTE_STRING", "UNTERMINATED_DOUBLE_QUOTE_STRING", 
                  "SINGLE_QUOTE_STRING", "UNTERMINATED_SINGLE_QUOTE_STRING", 
                  "TRIPLE_DOUBLE_QUOTE_STRING", "UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING", 
                  "TRIPLE_SINGLE_QUOTE_STRING", "UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING" ]

    grammarFileName = "SimpleSchema.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



    def CustomInitialization(self):
        self._nested_pair_ctr = 0
        self._lexing_include_filename = False

    class SimpleSchemaDenter(DenterHelper):
        def __init__(self, lexer, newline_token, indent_token, dedent_token):
            super().__init__(newline_token, indent_token, dedent_token, should_ignore_eof=False)

            self.lexer: SimpleSchemaLexer = lexer

        def pull_token(self):
            return super(SimpleSchemaLexer, self.lexer).nextToken()

    def nextToken(self):
        if not hasattr(self, "_denter"):
            self._denter = self.__class__.SimpleSchemaDenter(
                self,
                SimpleSchemaParser.NEWLINE,
                SimpleSchemaParser.INDENT,
                SimpleSchemaParser.DEDENT,
            )

        return self._denter.next_token()


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[41] = self.LPAREN_action 
            actions[42] = self.RPAREN_action 
            actions[43] = self.LBRACK_action 
            actions[44] = self.RBRACK_action 
            actions[45] = self.INCLUDE_FROM_action 
            actions[46] = self.INCLUDE_IMPORT_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self._nested_pair_ctr += 1
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self._nested_pair_ctr -= 1
     

    def LBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self._nested_pair_ctr += 1
     

    def RBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self._nested_pair_ctr -= 1
     

    def INCLUDE_FROM_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self._lexing_include_filename = True
     

    def INCLUDE_IMPORT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self._lexing_include_filename = False
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[38] = self.NEWLINE_sempred
            preds[39] = self.NESTED_NEWLINE_sempred
            preds[47] = self.INCLUDE_FILENAME_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self._nested_pair_ctr == 0
         

    def NESTED_NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 1:
                return self._nested_pair_ctr != 0
         

    def INCLUDE_FILENAME_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 2:
                return self._lexing_include_filename
         


