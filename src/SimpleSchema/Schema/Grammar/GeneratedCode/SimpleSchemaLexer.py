# Generated from C:\Code\v4\Common\SimpleSchema\src\SimpleSchema\Schema\Grammar\SimpleSchema.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



from antlr_denter.DenterHelper import DenterHelper
from SimpleSchemaParser import SimpleSchemaParser



def serializedATN():
    return [
        4,0,52,401,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
        13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
        17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,3,33,239,8,33,1,33,1,
        33,1,33,5,33,244,8,33,10,33,12,33,247,9,33,1,33,1,33,1,34,3,34,252,
        8,34,1,34,1,34,1,34,5,34,257,8,34,10,34,12,34,260,9,34,1,35,1,35,
        1,35,1,36,1,36,1,36,1,37,4,37,269,8,37,11,37,12,37,270,1,37,1,37,
        1,38,1,38,3,38,277,8,38,1,38,1,38,5,38,281,8,38,10,38,12,38,284,
        9,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,292,8,39,10,39,12,39,295,
        9,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,5,40,304,8,40,10,40,12,40,
        307,9,40,1,40,1,40,1,41,3,41,312,8,41,1,41,5,41,315,8,41,10,41,12,
        41,318,9,41,1,41,1,41,4,41,322,8,41,11,41,12,41,323,1,42,3,42,327,
        8,42,1,42,4,42,330,8,42,11,42,12,42,331,1,43,3,43,335,8,43,1,43,
        1,43,5,43,339,8,43,10,43,12,43,342,9,43,1,44,1,44,1,44,1,45,1,45,
        1,45,1,45,1,45,1,45,5,45,353,8,45,10,45,12,45,356,9,45,1,46,1,46,
        1,46,1,47,1,47,1,47,1,47,1,47,1,47,5,47,367,8,47,10,47,12,47,370,
        9,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,5,49,382,
        8,49,10,49,12,49,385,9,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
        1,51,1,51,5,51,397,8,51,10,51,12,51,400,9,51,5,293,354,368,383,398,
        0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,1,0,7,2,0,9,9,32,32,2,0,
        10,10,13,13,1,0,48,57,2,0,65,90,97,122,5,0,45,46,48,57,65,90,95,
        95,97,122,1,0,34,34,1,0,39,39,424,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,
        1,0,0,0,3,107,1,0,0,0,5,109,1,0,0,0,7,113,1,0,0,0,9,117,1,0,0,0,
        11,121,1,0,0,0,13,126,1,0,0,0,15,131,1,0,0,0,17,136,1,0,0,0,19,139,
        1,0,0,0,21,142,1,0,0,0,23,145,1,0,0,0,25,147,1,0,0,0,27,149,1,0,
        0,0,29,152,1,0,0,0,31,155,1,0,0,0,33,158,1,0,0,0,35,164,1,0,0,0,
        37,170,1,0,0,0,39,176,1,0,0,0,41,180,1,0,0,0,43,184,1,0,0,0,45,188,
        1,0,0,0,47,193,1,0,0,0,49,195,1,0,0,0,51,197,1,0,0,0,53,199,1,0,
        0,0,55,201,1,0,0,0,57,203,1,0,0,0,59,208,1,0,0,0,61,210,1,0,0,0,
        63,232,1,0,0,0,65,235,1,0,0,0,67,238,1,0,0,0,69,251,1,0,0,0,71,261,
        1,0,0,0,73,264,1,0,0,0,75,268,1,0,0,0,77,274,1,0,0,0,79,287,1,0,
        0,0,81,301,1,0,0,0,83,311,1,0,0,0,85,326,1,0,0,0,87,334,1,0,0,0,
        89,343,1,0,0,0,91,346,1,0,0,0,93,357,1,0,0,0,95,360,1,0,0,0,97,371,
        1,0,0,0,99,376,1,0,0,0,101,386,1,0,0,0,103,391,1,0,0,0,105,106,5,
        121,0,0,106,2,1,0,0,0,107,108,5,89,0,0,108,4,1,0,0,0,109,110,5,121,
        0,0,110,111,5,101,0,0,111,112,5,115,0,0,112,6,1,0,0,0,113,114,5,
        89,0,0,114,115,5,101,0,0,115,116,5,115,0,0,116,8,1,0,0,0,117,118,
        5,89,0,0,118,119,5,69,0,0,119,120,5,83,0,0,120,10,1,0,0,0,121,122,
        5,116,0,0,122,123,5,114,0,0,123,124,5,117,0,0,124,125,5,101,0,0,
        125,12,1,0,0,0,126,127,5,84,0,0,127,128,5,114,0,0,128,129,5,117,
        0,0,129,130,5,101,0,0,130,14,1,0,0,0,131,132,5,84,0,0,132,133,5,
        82,0,0,133,134,5,85,0,0,134,135,5,69,0,0,135,16,1,0,0,0,136,137,
        5,111,0,0,137,138,5,110,0,0,138,18,1,0,0,0,139,140,5,79,0,0,140,
        141,5,110,0,0,141,20,1,0,0,0,142,143,5,79,0,0,143,144,5,78,0,0,144,
        22,1,0,0,0,145,146,5,110,0,0,146,24,1,0,0,0,147,148,5,78,0,0,148,
        26,1,0,0,0,149,150,5,110,0,0,150,151,5,111,0,0,151,28,1,0,0,0,152,
        153,5,78,0,0,153,154,5,111,0,0,154,30,1,0,0,0,155,156,5,78,0,0,156,
        157,5,79,0,0,157,32,1,0,0,0,158,159,5,102,0,0,159,160,5,97,0,0,160,
        161,5,108,0,0,161,162,5,115,0,0,162,163,5,101,0,0,163,34,1,0,0,0,
        164,165,5,70,0,0,165,166,5,97,0,0,166,167,5,108,0,0,167,168,5,115,
        0,0,168,169,5,101,0,0,169,36,1,0,0,0,170,171,5,70,0,0,171,172,5,
        65,0,0,172,173,5,76,0,0,173,174,5,83,0,0,174,175,5,69,0,0,175,38,
        1,0,0,0,176,177,5,111,0,0,177,178,5,102,0,0,178,179,5,102,0,0,179,
        40,1,0,0,0,180,181,5,79,0,0,181,182,5,102,0,0,182,183,5,102,0,0,
        183,42,1,0,0,0,184,185,5,79,0,0,185,186,5,70,0,0,186,187,5,70,0,
        0,187,44,1,0,0,0,188,189,5,110,0,0,189,190,5,117,0,0,190,191,5,108,
        0,0,191,192,5,108,0,0,192,46,1,0,0,0,193,194,5,126,0,0,194,48,1,
        0,0,0,195,196,5,123,0,0,196,50,1,0,0,0,197,198,5,125,0,0,198,52,
        1,0,0,0,199,200,5,44,0,0,200,54,1,0,0,0,201,202,5,58,0,0,202,56,
        1,0,0,0,203,204,5,112,0,0,204,205,5,97,0,0,205,206,5,115,0,0,206,
        207,5,115,0,0,207,58,1,0,0,0,208,209,5,124,0,0,209,60,1,0,0,0,210,
        211,5,115,0,0,211,212,5,105,0,0,212,213,5,109,0,0,213,214,5,112,
        0,0,214,215,5,108,0,0,215,216,5,101,0,0,216,217,5,95,0,0,217,218,
        5,115,0,0,218,219,5,99,0,0,219,220,5,104,0,0,220,221,5,101,0,0,221,
        222,5,109,0,0,222,223,5,97,0,0,223,224,5,95,0,0,224,225,5,105,0,
        0,225,226,5,110,0,0,226,227,5,99,0,0,227,228,5,108,0,0,228,229,5,
        117,0,0,229,230,5,100,0,0,230,231,5,101,0,0,231,62,1,0,0,0,232,233,
        5,45,0,0,233,234,5,62,0,0,234,64,1,0,0,0,235,236,5,61,0,0,236,66,
        1,0,0,0,237,239,5,13,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,
        1,0,0,0,240,241,5,10,0,0,241,245,4,33,0,0,242,244,7,0,0,0,243,242,
        1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,
        1,0,0,0,247,245,1,0,0,0,248,249,6,33,0,0,249,68,1,0,0,0,250,252,
        5,13,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,
        5,10,0,0,254,258,4,34,1,0,255,257,7,0,0,0,256,255,1,0,0,0,257,260,
        1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,70,1,0,0,0,260,258,1,
        0,0,0,261,262,5,40,0,0,262,263,6,35,1,0,263,72,1,0,0,0,264,265,5,
        41,0,0,265,266,6,36,2,0,266,74,1,0,0,0,267,269,7,0,0,0,268,267,1,
        0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,272,1,
        0,0,0,272,273,6,37,0,0,273,76,1,0,0,0,274,276,5,92,0,0,275,277,5,
        13,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,282,5,
        10,0,0,279,281,7,0,0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,
        0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,6,
        38,0,0,286,78,1,0,0,0,287,288,5,35,0,0,288,289,5,47,0,0,289,293,
        1,0,0,0,290,292,9,0,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,294,
        1,0,0,0,293,291,1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,
        5,47,0,0,297,298,5,35,0,0,298,299,1,0,0,0,299,300,6,39,0,0,300,80,
        1,0,0,0,301,305,5,35,0,0,302,304,8,1,0,0,303,302,1,0,0,0,304,307,
        1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,
        1,0,0,0,308,309,6,40,0,0,309,82,1,0,0,0,310,312,5,45,0,0,311,310,
        1,0,0,0,311,312,1,0,0,0,312,316,1,0,0,0,313,315,7,2,0,0,314,313,
        1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,319,
        1,0,0,0,318,316,1,0,0,0,319,321,5,46,0,0,320,322,7,2,0,0,321,320,
        1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,84,1,
        0,0,0,325,327,5,45,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,329,1,
        0,0,0,328,330,7,2,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,
        0,0,0,331,332,1,0,0,0,332,86,1,0,0,0,333,335,5,95,0,0,334,333,1,
        0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,340,7,3,0,0,337,339,7,
        4,0,0,338,337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,
        0,0,0,341,88,1,0,0,0,342,340,1,0,0,0,343,344,3,91,45,0,344,345,5,
        34,0,0,345,90,1,0,0,0,346,354,5,34,0,0,347,348,5,92,0,0,348,353,
        5,34,0,0,349,350,5,92,0,0,350,353,5,92,0,0,351,353,8,5,0,0,352,347,
        1,0,0,0,352,349,1,0,0,0,352,351,1,0,0,0,353,356,1,0,0,0,354,355,
        1,0,0,0,354,352,1,0,0,0,355,92,1,0,0,0,356,354,1,0,0,0,357,358,3,
        95,47,0,358,359,5,39,0,0,359,94,1,0,0,0,360,368,5,39,0,0,361,362,
        5,92,0,0,362,367,5,39,0,0,363,364,5,92,0,0,364,367,5,92,0,0,365,
        367,8,6,0,0,366,361,1,0,0,0,366,363,1,0,0,0,366,365,1,0,0,0,367,
        370,1,0,0,0,368,369,1,0,0,0,368,366,1,0,0,0,369,96,1,0,0,0,370,368,
        1,0,0,0,371,372,3,99,49,0,372,373,5,34,0,0,373,374,5,34,0,0,374,
        375,5,34,0,0,375,98,1,0,0,0,376,377,5,34,0,0,377,378,5,34,0,0,378,
        379,5,34,0,0,379,383,1,0,0,0,380,382,9,0,0,0,381,380,1,0,0,0,382,
        385,1,0,0,0,383,384,1,0,0,0,383,381,1,0,0,0,384,100,1,0,0,0,385,
        383,1,0,0,0,386,387,3,103,51,0,387,388,5,39,0,0,388,389,5,39,0,0,
        389,390,5,39,0,0,390,102,1,0,0,0,391,392,5,39,0,0,392,393,5,39,0,
        0,393,394,5,39,0,0,394,398,1,0,0,0,395,397,9,0,0,0,396,395,1,0,0,
        0,397,400,1,0,0,0,398,399,1,0,0,0,398,396,1,0,0,0,399,104,1,0,0,
        0,400,398,1,0,0,0,23,0,238,245,251,258,270,276,282,293,305,311,316,
        323,326,331,334,340,352,354,366,368,383,398,3,6,0,0,1,35,0,1,36,
        1
    ]

class SimpleSchemaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    NESTED_NEWLINE = 34
    NEWLINE = 35
    LPAREN = 36
    RPAREN = 37
    HORIZONTAL_WHITESPACE = 38
    LINE_CONTINUATION = 39
    MULTILINE_COMMENT = 40
    COMMENT = 41
    NUMBER = 42
    INTEGER = 43
    IDENTIFIER = 44
    DOUBLE_QUOTE_STRING = 45
    UNTERMINATED_DOUBLE_QUOTE_STRING = 46
    SINGLE_QUOTE_STRING = 47
    UNTERMINATED_SINGLE_QUOTE_STRING = 48
    TRIPLE_DOUBLE_QUOTE_STRING = 49
    UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING = 50
    TRIPLE_SINGLE_QUOTE_STRING = 51
    UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'y'", "'Y'", "'yes'", "'Yes'", "'YES'", "'true'", "'True'", 
            "'TRUE'", "'on'", "'On'", "'ON'", "'n'", "'N'", "'no'", "'No'", 
            "'NO'", "'false'", "'False'", "'FALSE'", "'off'", "'Off'", "'OFF'", 
            "'null'", "'~'", "'{'", "'}'", "','", "':'", "'pass'", "'|'", 
            "'simple_schema_include'", "'->'", "'='", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "NESTED_NEWLINE", "NEWLINE", "LPAREN", "RPAREN", "HORIZONTAL_WHITESPACE", 
            "LINE_CONTINUATION", "MULTILINE_COMMENT", "COMMENT", "NUMBER", 
            "INTEGER", "IDENTIFIER", "DOUBLE_QUOTE_STRING", "UNTERMINATED_DOUBLE_QUOTE_STRING", 
            "SINGLE_QUOTE_STRING", "UNTERMINATED_SINGLE_QUOTE_STRING", "TRIPLE_DOUBLE_QUOTE_STRING", 
            "UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING", "TRIPLE_SINGLE_QUOTE_STRING", 
            "UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "NESTED_NEWLINE", "NEWLINE", "LPAREN", "RPAREN", 
                  "HORIZONTAL_WHITESPACE", "LINE_CONTINUATION", "MULTILINE_COMMENT", 
                  "COMMENT", "NUMBER", "INTEGER", "IDENTIFIER", "DOUBLE_QUOTE_STRING", 
                  "UNTERMINATED_DOUBLE_QUOTE_STRING", "SINGLE_QUOTE_STRING", 
                  "UNTERMINATED_SINGLE_QUOTE_STRING", "TRIPLE_DOUBLE_QUOTE_STRING", 
                  "UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING", "TRIPLE_SINGLE_QUOTE_STRING", 
                  "UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING" ]

    grammarFileName = "SimpleSchema.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



    multiline_statement_ctr = 0

    class SimpleSchemaDenter(DenterHelper):
        def __init__(self, lexer, newline_token, indent_token, dedent_token):
            super().__init__(newline_token, indent_token, dedent_token, should_ignore_eof=False)

            self.lexer: SimpleSchemaLexer = lexer

        def pull_token(self):
            return super(SimpleSchemaLexer, self.lexer).nextToken()

    def nextToken(self):
        if not hasattr(self, "_denter"):
            self._denter = self.__class__.SimpleSchemaDenter(
                self,
                SimpleSchemaParser.NEWLINE,
                SimpleSchemaParser.INDENT,
                SimpleSchemaParser.DEDENT,
            )

        return self._denter.next_token()


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[35] = self.LPAREN_action 
            actions[36] = self.RPAREN_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             SimpleSchemaLexer.multiline_statement_ctr += 1 
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             SimpleSchemaLexer.multiline_statement_ctr -= 1 
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[33] = self.NESTED_NEWLINE_sempred
            preds[34] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NESTED_NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return  SimpleSchemaLexer.multiline_statement_ctr != 0 
         

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 1:
                return  SimpleSchemaLexer.multiline_statement_ctr == 0 
         


